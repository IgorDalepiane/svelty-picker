.sdt-calendar-colors.svelte-tb6rom{--sdt-primary:#286090;--sdt-color:#000;--sdt-bg-main:#fff;--sdt-bg-today:var(--sdt-primary);--sdt-bg-clear:#dc3545;--sdt-today-bg:#1e486d;--sdt-clear-color:#dc3545;--sdt-btn-bg-hover:#eee;--sdt-btn-header-bg-hover:#dfdfdf;--sdt-clock-bg:#eeeded;--sdt-clock-bg-minute:rgb(238, 237, 237, 0.25);--sdt-clock-bg-shadow:0 0 128px 2px #ddd inset;--sdt-shadow:#ccc}.std-calendar-wrap.svelte-tb6rom{width:280px;background-color:var(--sdt-bg-main);box-shadow:0 1px 6px var(--sdt-shadow);border-radius:4px;padding:0.25rem 0.25rem 0.5rem;color:var(--sdt-color)}.std-calendar-wrap.is-popup.svelte-tb6rom{box-shadow:0 1px 6px var(--sdt-shadow)}.std-btn-row.svelte-tb6rom{margin-top:0.5rem;display:flex;justify-content:space-evenly}.sdt-action-btn.svelte-tb6rom{padding:0.25rem 0.5rem;font-size:.875rem;border-radius:0.2rem}.sdt-today-btn.svelte-tb6rom{background-color:var(--sdt-primary);color:var(--sdt-today-color, var(--sdt-bg-main));padding:0.25rem 0.5rem;font-size:.875rem;border-radius:0.2rem;border:1px solid var(--sdt-today-bg)}.sdt-today-btn[disabled].svelte-tb6rom{opacity:0.75}.sdt-today-btn.svelte-tb6rom:focus,.sdt-today-btn.svelte-tb6rom:active,.sdt-today-btn.svelte-tb6rom:hover:not([disabled]){background-color:var(--sdt-today-bg)}.sdt-clear-btn.svelte-tb6rom{border:1px solid var(--sdt-clear-color);background-color:transparent;color:var(--sdt-clear-color)}.sdt-clear-btn.svelte-tb6rom:focus,.sdt-clear-btn.svelte-tb6rom:active:not([disabled]),.sdt-clear-btn.svelte-tb6rom:hover:not([disabled]){background-color:var(--sdt-clear-color);color:var(--sdt-clear-hover-color, var(--sdt-bg-main))}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */.sdt-cal-td.svelte-1xp8yha.svelte-1xp8yha{padding:0;font-size:90%;text-align:center;background-color:var(--sdt-bg-main);;}.sdt-cal-th.svelte-1xp8yha.svelte-1xp8yha{height:24px}.sdt-calendar.svelte-1xp8yha.svelte-1xp8yha{height:221px;overflow:hidden}.sdt-calendar.is-grid.svelte-1xp8yha.svelte-1xp8yha{display:grid}.sdt-calendar.is-grid.svelte-1xp8yha .sdt-table.svelte-1xp8yha{grid-column:1/2;grid-row:1/2
  }.sdt-table.svelte-1xp8yha.svelte-1xp8yha{width:100%;border-collapse:collapse}.sdt-table-height.svelte-1xp8yha.svelte-1xp8yha{height:222px}.animate-transition.svelte-1xp8yha.svelte-1xp8yha{will-change:transform;transition:transform 0.3s ease
  }.not-current.svelte-1xp8yha.svelte-1xp8yha{opacity:0.3}.not-current.svelte-1xp8yha.svelte-1xp8yha:hover{opacity:0.55}.std-btn.svelte-1xp8yha.svelte-1xp8yha{margin:0;border:0;background:transparent;text-align:center;width:100%;border-radius:4px;cursor:pointer;padding:0.3rem;box-sizing:border-box;color:var(--sdt-color)}.sdt-btn-day.svelte-1xp8yha.svelte-1xp8yha{max-height:32px}.std-btn[disabled].svelte-1xp8yha.svelte-1xp8yha{cursor:not-allowed;opacity:0.35}.std-btn-header.svelte-1xp8yha.svelte-1xp8yha{width:auto;font-weight:bold;padding:0.375rem 0.5rem}.std-btn-header.icon-btn.svelte-1xp8yha.svelte-1xp8yha:first-of-type{padding-left:0.375rem;padding-right:0.375rem}.std-btn-header.icon-btn.svelte-1xp8yha.svelte-1xp8yha{padding-left:0.25rem;padding-right:0.25rem}.std-btn.svelte-1xp8yha.svelte-1xp8yha:hover{background-color:var(--sdt-btn-bg-hover)}.is-selected.svelte-1xp8yha .std-btn.svelte-1xp8yha{background-color:var(--sdt-primary);color:var(--sdt-color-selected, var(--sdt-bg-main));opacity:0.9}.std-btn-header.svelte-1xp8yha.svelte-1xp8yha:hover{background-color:var(--sdt-btn-header-bg-hover)}.sdt-time-icon.svelte-1xp8yha.svelte-1xp8yha{margin-right:-4px}.sdt-time-icon.svelte-1xp8yha svg.svelte-1xp8yha{margin:4px 0}.sdt-tbody-lg.svelte-1xp8yha.svelte-1xp8yha{background-color:var(--sdt-bg-main)}.sdt-tbody-lg.svelte-1xp8yha .std-btn.svelte-1xp8yha{height:72px}.sdt-thead-nav.svelte-1xp8yha.svelte-1xp8yha{display:flex;margin-bottom:0.25rem}.sdt-nav-btns.svelte-1xp8yha.svelte-1xp8yha{white-space:nowrap}.sdt-toggle-btn.svelte-1xp8yha.svelte-1xp8yha{width:100%;text-align:left}.sdt-today.svelte-1xp8yha.svelte-1xp8yha:before{box-sizing:border-box;position:absolute;content:'';margin-left:4px;margin-top:4px;border-left:4px solid var(--sdt-shadow);border-top:4px solid var(--sdt-shadow);border-bottom:4px solid transparent;border-right:4px solid transparent;border-radius:2px;height:4px;z-index:2}.sdt-svg.svelte-1xp8yha.svelte-1xp8yha{fill:var(--sdt-color)}.sdt-today.svelte-1xp8yha.svelte-1xp8yha:hover:before{border-left-color:var(--sdt-primary);border-top-color:var(--sdt-primary)}.is-selected.sdt-today.svelte-1xp8yha.svelte-1xp8yha:before{border-left-color:#eee;border-top-color:#eee}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */.sdt-timer.svelte-yz95cb.svelte-yz95cb{position:relative;width:272px}.sdt-time-head.svelte-yz95cb.svelte-yz95cb{position:relative;display:flex;justify-content:center;align-items:center}.sdt-time-figure.svelte-yz95cb.svelte-yz95cb{font-size:1.5rem;font-weight:bold}.sdt-clock.svelte-yz95cb.svelte-yz95cb{margin:auto;position:relative;width:260px;height:260px;background-color:var(--sdt-clock-bg);border-radius:50%;transition:background-color 0.3s}.sdt-clock.is-minute-view.svelte-yz95cb.svelte-yz95cb{background-color:var(--sdt-clock-bg-minute, var(--sdt-clock-bg));box-shadow:var(--sdt-clock-bg-shadow)}.sdt-time-btn.svelte-yz95cb.svelte-yz95cb{border:0;background:transparent;text-align:center;border-radius:4px;cursor:pointer;padding:0.375rem;color:var(--sdt-color)}.sdt-svg.svelte-yz95cb.svelte-yz95cb{fill:var(--sdt-color)}.sdt-time-btn.svelte-yz95cb.svelte-yz95cb:not(.is-active){opacity:0.5}.sdt-time-btn.svelte-yz95cb.svelte-yz95cb:hover{background-color:var(--sdt-btn-header-bg-hover)}.sdt-back-btn.svelte-yz95cb.svelte-yz95cb{position:absolute;top:0;left:0;opacity:1 !important}.sdt-meridian.svelte-yz95cb.svelte-yz95cb{position:absolute;top:0.25rem;right:0.25rem;display:flex;flex-flow:column;font-size:90%}.sdt-meridian.svelte-yz95cb .sdt-time-btn.svelte-yz95cb{padding:0.15rem 0.5rem}.sdt-meridian.svelte-yz95cb .sdt-time-btn.is-active.svelte-yz95cb{font-weight:bold}.sdt-middle-dot.svelte-yz95cb.svelte-yz95cb{left:50%;top:50%;width:6px;height:6px;position:absolute;transform:translate(-50%, -50%);background-color:var(--sdt-primary);border-radius:50%}.sdt-hand-pointer.svelte-yz95cb.svelte-yz95cb{width:2px;height:calc(40% + 1px);bottom:50%;left:calc(50% - 1px);position:absolute;background-color:var(--sdt-primary);transform-origin:center bottom 0;transition:transform 0.3s ease, height 0.15s ease}.sdt-hand-circle.svelte-yz95cb.svelte-yz95cb{left:-15px;top:-21px;position:relative;width:4px;height:4px;background-color:transparent;border:14px solid var(--sdt-primary);border-radius:50%;box-sizing:content-box}.sdt-tick.svelte-yz95cb.svelte-yz95cb{position:absolute;width:30px;height:30px;border-width:0;transform:translate(-50%, -50%);text-align:center;border-radius:50%;line-height:20px;cursor:pointer;background-color:transparent}.sdt-tick.is-selected.svelte-yz95cb.svelte-yz95cb{animation:svelte-yz95cb-tick-selection 0s 0.175s ease-out forwards}@keyframes svelte-yz95cb-tick-selection{0%{color:initial;background-color:transparent}100%{background-color:var(--sdt-primary);color:var(--sdt-color-selected, var(--sdt-bg-main))}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */